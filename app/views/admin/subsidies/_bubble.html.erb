<div id="graph"><div id="loader">Loading...</div></div>

<script>
// Setup
	var w = 970, h = 640;
	var graph = d3.select("#graph").append("svg:svg").attr("width", w).attr("height", h);
	var bubble = d3.layout.pack()
		.sort(null)
		.value(function(d) { return (d.amount_raw > 0) ? d.amount_raw / 1000 : 1; })
		.size([w,h]);

	var filter = new Array();
		filter['threshhold'] = 1E5; // 1E6 = $1M

// Init
	d3.json("<%= request.url %>.json", function(json) {
		draw(json.subsidies);
		setInterval(function() { update(json.subsidies);	}, 2000);
		d3.select("#loader").remove();
	});
		
// Animation
	function draw(data) {
	
		var node = graph.selectAll("g.node")
			.data(bubble(bubblize(data))
				.filter(function(d) { return !d.children; }))
			.enter().append("svg:g")
				.attr("class", "node")
				.attr("transform", function(d) { return "translate(" + Math.floor(d.x) + "," + Math.floor(d.y) + ")"; });
			
			node.append("svg:text")
				.attr("class", "label")
				.attr("style", function(d) { return "font-size:"+(d.r / 2) + "px"; })
				.text(function(d) { return d.data.amount_human; });

			node.append("svg:circle")
				.attr("class", function(d) { return d.data.category; })
				.attr("r", function(d) { return d.r; })
				.on("click", function(d) { location.href = d.data.subsidy_url; });
	}
	
	function update(data) {

		bubble.value(function(d) { return (d.amount_raw > 0) ? d.amount_raw / 1000 * Math.random() : 1; });

		var node = graph.selectAll("g.node")
			.data(bubble.nodes).filter(function(d) { return !d.children; });

/*
		node.enter().append("svg:g")
			.attr("class", "node")
			.attr("transform", function(d) { return "translate(" + Math.floor(d.x) + "," + Math.floor(d.y) + ")"; });
				
			node.append("svg:text")
				.text(function(d) { return d.data.amount_human; })
				.attr("class", "label")
				.attr("style", function(d) { return "font-size:" + (Math.floor(d.r) / 2) + "px"; });
			node.append("svg:circle")
				.attr("class", function(d) { return d.data.category; })
				.attr("r", function(d) { return Math.floor(d.r); });
*/
				
		// Update...
		
		node.transition()
			.duration(1000)
			.attr("transform", function(d) { return "translate(" + Math.floor(d.x) + "," + Math.floor(d.y) + ")"; });
		
		// Exit...
		
		node.exit()
			.remove();
		
/*

		var circle = graph.selectAll("circle")
			.data(bubble(bubblize(data))
//				.filter(function(d) { return d.data.amount_raw > filter['threshold']; })
				.filter(function(d) { return !d.children; }));

		var labels = graph.selectAll("text.label")
			.data(bubble(bubblize(data))
				.filter(function(d) { return !d.children; }));
		
		// Enter...
		labels.enter().append("svg:text")
			.text(function(d) { return d.data.amount_human; })
			.attr("x", function(d) { return Math.floor(d.x); })
			.attr("y", function(d) { return Math.floor(d.y); })
			.attr("style", "font-size:0px")
			.attr("class", "label")
			.transition()
				.duration(1000)
				.attr("style", function(d) { return "font-size:" + (d.r / 2) + "px"; });

		circle.enter().append("svg:circle")
			.attr("cx", function(d) { return Math.floor(d.x); })
			.attr("cy", function(d) { return Math.floor(d.y); })
			.attr("r", 0)
			.attr("class", function(d) { return d.data.category; })
			.transition()
				.duration(1000)
				.attr("r", function(d) { return Math.floor(d.r); });		
		
		// Update...
		circle.transition()
			.duration(1000)
			.attr("cx", function(d) { return Math.floor(d.x); })
			.attr("cy", function(d) { return Math.floor(d.y); })
			.attr("r", function (d) { return Math.floor(d.r); });

		labels.transition()
			.duration(1000)
			.attr("x", function(d) { return Math.floor(d.x); })
			.attr("y", function(d) { return Math.floor(d.y); });

		// Exit...
		circle.exit().transition()
			.duration(1000)
			.attr("r", 0)
			.remove();
		
		labels.exit()
			.remove();
*/
	}
	
// Functions
	function bubblize( data ) {
		var bubbles = [];
		for (var b in data) {
			var bubble = data[b];
			bubbles.push(bubble);
		}
		return {children: bubbles};
	}
	
</script>